Rank : 1095 / 13794

1.
第一題超簡單，prefix sum寫到爛了，直接搞定
複雜度O(n)，n是陣列長度

2.
第二題的思路是，如果要有最少的unique number，那我們就應該從次數少的開始減起，這樣才可以保證剩下數字的重複性高
所以先開一個unordered_map算一下個數，之後把次數放進vector sort，然後就從小的開始減
一直減到k為0，vector剩下多少項目就是答案
複雜度O(nlogn)，主要來自sort

3.
第三題卡了一下，最後果然是絕望中想起binary search，然後就很簡單了
左界是1，右界是最大值，目標是找到符合條件的最小值
對於目標的數字，我們traverse原本的陣列，看有沒有符合m和k的條件
複雜度O(n*log10^9)，其實可以再優化一下，把右界改成原陣列最大值，但本來就會過，所以就不管了

4.
這題有點神奇，一開始想了一下暴力解，但知道會超時，所以直接想更優解
看了下input size想了下複雜度，猜測每次get應該只能用O(logn)才會過
比賽的時候想了一個存parent的方法，前處理複雜度O(nlogn)而且get複雜度O(1)，但是存太多東西，直接memory limit exceeded
最後看解法是用類似binary(double)的方式存，存第1, 2, 4, 8...的parent，然後查照的時候複雜度就是O(logn)
一開始先開一個16格的vector，因為input最大值可以用16 bit表示
然後初始每個數字的頭為自己的parent，接著開始填表格，從第2個parent開始找，每一次找全部的數字
新一格的parent，其實就等於自己上一個parent的parent
之後的get，就用binary看，因為最前面一位一定是1，所以我們就從尾走到最前面，如果k當前一位為1，則node改成node的parent
然後我們就一直走完16個位置或是node為-1(代表k已經太大，超過我們有的parent數)就return node
初始化複雜度為O(nlogn)，get複雜度為O(logn)，有點難的題目...
