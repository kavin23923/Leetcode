Rank : 1269 / 12542

1.
第一題簡單寫，先sort原本的陣列，順序是由大到小，再計算全部的總和
然後一個數一個數拿，如果現在拿的數字總和超過全部總和的一半就跳出迴圈
複雜度O(nlogn)

2.
第二題直接一步一步解，如果位數是0，直接拿掉最後一位（除以2）
如果尾數是1，則往前面找第一個為0的位置，把它變為1，其他經過的都變為0（加1），如果原本全都是1，則在最前面多加一個1
最後就看經過幾個回合
複雜度是O(n)，因為如果尾數是0，則這一輪可以刪掉這位數，如果尾數是1，則兩輪後可以消掉這位數，而往前看的位數，因為保證會變為0，在均攤複雜後，一個位數最多就是看兩次

3.
第三題其實有點不知道自己在寫什麼，最後傳錯一次還是過了
方法是用greedy，每一輪都先sort挑出目前剩餘最多的兩個數字
然後這裡就分兩種情況:
1. 如果最大的比第二大的多至少三個（而且第二大的至少有一個），則最大的拿兩個，第二大的拿一個（ex: 5a2b -> aabaaba比aabbaa還要多）
2. 不然就分別拿，如果有兩個就拿兩個，只有一個就拿一個
最後特判一種情況，如果目前最大的跟答案最後一個長一樣，就可以跳出迴圈了
因爲如果現在還有剩，表示我上一輪一定拿了兩個，然後現在又可以拿且又跟最後的重複，表示一定會出現至少連續三個
這樣瞎七八greedy了一下就過了，程式有夠醜的...
複雜度大概是跟最大的次數成一次關係

4.
第四題比賽的時候知道這種輸贏問題要用minmax，也知道是dp，但就是不會寫果斷放棄Orz
首先定義dp[i]為忽略i以前的數字，Alice在這個位置最多可以贏多少
接著，在每一輪總共有三種可能:
1. 拿第i個 -> 收益為value[i] - dp[i+1]
2. 拿第i個和第i+1個 -> 收益為value[i] + value[i+1] - dp[i+2]
3. 拿第i個,第i+1個和第i+2個 -> 收益為value[i] + value[i+1] + value[i+2] - dp[i+3]
以第二種為例，如果Alice在這輪拿了兩個，則Bob在這輪一定可以拿到dp[i+2]（在那個位置的最大收益）
所以就從i = size-1 ~ 0開始跑迴圈，每一輪找三個可能的最大值
最後只要看dp[0]是正還是負就可以了，正就是Alice贏，負就是Bob贏，0就是Tie
特別注意一開始dp的初始化，不能是0（因為過程可能會有負），也不能是INT_MIN（因為會overflow），所以不初始化直接寫在迴圈裡判斷
複雜度是O(n)，知道思路之後寫起來還真簡單...
