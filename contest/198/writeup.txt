Rank : 780 / 15151

1.
第一題就是直接simulate它，直到我剩下的空瓶已經不能再換成滿的瓶子為止
複雜度O(logn)，n是原本瓶子的個數，因為每次總瓶數會除以exchange，所以是log複雜度

2.
第二題我們直接dfs遞迴，從child開始，然後一直往上看
先把原本的edge改存成adjacency list的方式
對於每一個點，我們都記錄一個count vector，代表從child到自己每一個char總共出現幾次
然後先dfs所有的child(就是還沒走過的點)，接著把child回傳的count累加起來
然後更新自己這格的答案，再把count回傳回去
複雜度O(n)，n是所有點數，因為每一個邊只會看一次，點也只會走一次

3.
第三題greedy簡直喪心病狂...比賽的時候被各種case擊敗
首先，我們先紀錄每一個char的左右邊界
接著開始traverse原本的字串，如果當前位置剛好是某一個char的左界，那我們就開始更新右界
看看從當前位置~它的右界中的所有char，如果左界比我們更前面，代表overlap，則不能使用
不然我們就更新右界為比較大的值，最後回傳這個值
接著我們看，如果新的右界更大，代表跟之前的沒有overlap，則插入一個新的字串
如果沒有比新的右界大，則現在的字串長度一定比之前小(左界更大右界更小)
那我們直接去改答案矩陣的最後一個就好，最後跑完就是答案
複雜度O(n)，一開始更新邊界是O(n)，後面的複雜度是O(26n)，因為最多只會有26個開頭，每一次可能都要走n的長度

4.

